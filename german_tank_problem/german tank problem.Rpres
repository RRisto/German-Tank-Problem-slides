
German Tank Problem Shiny app
========================================================
author: Risto
date: April 2015

German Tank Problem app
========================================================

You have to guess number of tanks produced size based on serial numbers of few tanks captured. All tanks have sequential serial number.

- For example you have captured 5 tanks with serial numbers 73, 5, 83, 49, 25. What is actual tank production?

- [Shiny application](https://ristohinno.shinyapps.io/GermanTankProblemApp/) provides and compares different solutions

-[Github repository](https://github.com/RRisto/GermanTankProblem)

![alt text](figures/tank.png)

Models for simulation
========================================================

- Change number of **tanks captured**, actual tank **production range** and **margin** for model 2 and compare how good different models are:

- **Model 1**, highest serial number captured = actual tank production

- **Model 2**, model 1 answer +(model 1 answer * margin) = actual tank production

- **Model 3**, formula originally used by allies: $$actual\ tank\ production = max + \frac{max}{n} - 1$$ (max - maximum serial number captured; n - number of tanks captured)

Compare different models (1)
========================================================

App simulates 10 guesses per model for each tank in actual chosen prodcution range. Accuracy of models is assessed by residuals:

 - residuals (as % difference from actual production) summary:

```{r, echo=FALSE}
library(reshape2)
library(dplyr)
library(ggplot2)
library(scales)
set.seed(500)
simulation <- function(min=100, max=150, n=5, margin=5){
    real=c()
    third.guess=data.frame(NULL)
    initial.guess=data.frame(NULL)
    second.guess=data.frame(NULL)
    resids1=data.frame(NULL)
    resids2=data.frame(NULL)
    resids3=data.frame(NULL)
    #function for third guess
    thirdModel = function(samp) {
        max(samp) + max(samp)/length(samp) - 1
    }
    #simulation
    x = seq(min, max, by=1)
    minminus=min-1
    for(i in x) {
        trueTop = 1*i
        real[i-minminus]=trueTop
        for(j in 1:10) {
            observeds = sample(1:trueTop, n)#every simulation we take
            #randomly n samples
            third.guess[i-minminus,j] = thirdModel(observeds)
            initial.guess[i-minminus,j]=max(observeds)
            second.guess[i-minminus,j]=max(observeds)*(1+(margin/100))
            resids1[i-minminus,j] =initial.guess[i-minminus,j]-trueTop
            resids2[i-minminus,j] =second.guess[i-minminus,j]-trueTop
            resids3[i-minminus,j] =third.guess[i-minminus,j]-trueTop
        }
    }
    #function for making data short, renaming levels
    table=function(data, name){
        data=data %>%
            mutate( real=real) %>%
            melt(id="real") %>%
            mutate(variable=name)
        data
    }
    initial.guess=table(initial.guess, "Model 1")
    second.guess=table(second.guess, "Model 2")
    third.guess=table(third.guess, "Model 3")
    resids1=table(resids1, "resids1")
    resids2=table(resids2, "resids2")
    resids3=table(resids3, "resids3")
    #rbind tables
    data.guess=rbind(initial.guess, second.guess, third.guess)
    data.resids=rbind(resids1, resids2, resids3)
    #add resids to initial table
    data.guess$resids=data.resids$value
    #calculate residulas as percent
    data.guess=mutate(data.guess, resids.percent=(resids/real))
    return(data.guess)
}
resids=function(data){
    summary=data %>%
        group_by(variable) %>%
        summarise(Mean=mean(resids.percent*100),
                  Median=median(resids.percent*100),
                  Sd=sd(resids.percent*100))
    names(summary)[1]="Model"
    as.data.frame(summary)
}

resids(simulation())
```

![alt text](figures/crushed2.png)

Compare different models (2): residuals histogram
========================================================
 
```{r, echo=FALSE}

library("knitr")
library("devtools")
url<-"https://plot.ly/~risto.hinno/100/"
plotly_iframe <- paste("<center><iframe scrolling='no' seamless='seamless' style='border:none' src='", url, 
    "/800/1200' width='800' height='500'></iframe><center>", sep = "")

```
`r I(plotly_iframe)`

Have a nice [tank hunt](https://ristohinno.shinyapps.io/GermanTankProblemApp/)!